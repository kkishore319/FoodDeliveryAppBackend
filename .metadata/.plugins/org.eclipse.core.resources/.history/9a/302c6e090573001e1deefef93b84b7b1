package com.fds;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import com.fds.controller.AuthController;
import com.fds.jwt.JwtUtility;
import com.fds.request.LoginRequest;
import com.fds.response.JSONResponse;
import com.fds.service.UserDetailsImpl;

@ExtendWith(MockitoExtension.class)
public class LoginControllerTest {

    @Mock
    private AuthenticationProvider authenticationManager;

    @Mock
    private JwtUtility jwtUtility;

    private AuthController authController;

    @BeforeEach
    public void setUp() {
    //   authController = new AuthController(authenticationManager, jwtUtility);
    }

    @Test
    public void testValidateUser_SuccessfulAuthentication() {
        // Arrange
        String username = "testuser";
        String password = "testpassword";
        String jwtToken = "sampleJwtToken";
        List<SimpleGrantedAuthority> authorities = new ArrayList<>();
        authorities.add(new SimpleGrantedAuthority("ROLE_USER"));

        LoginRequest loginRequest = new LoginRequest(username, password);
        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(username, password);

        UserDetailsImpl userDetails = new UserDetailsImpl(username, password, authorities);
        when(authenticationManager.authenticate(authenticationToken)).thenReturn(authenticationToken);
        when(jwtUtility.generateToken(authenticationToken)).thenReturn(jwtToken);

        // Act
        ResponseEntity<?> responseEntity = authController.validateUser(loginRequest);

        // Assert
        assertEquals(200, responseEntity.getStatusCodeValue());
        JSONResponse jsonResponse = (JSONResponse) responseEntity.getBody();
       // assertEquals(jwtToken, jsonResponse.getJwtToken());
        assertEquals(username, jsonResponse.getUsername());
        assertEquals(1, jsonResponse.getRoles().size());
        assertEquals("ROLE_USER", jsonResponse.getRoles().get(0));
    }

    @Test
    public void testValidateUser_FailedAuthentication() {
        // Arrange
        String username = "testuser";
        String password = "invalidpassword";
        LoginRequest loginRequest = new LoginRequest(username, password);

        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(username, password);
        when(authenticationManager.authenticate(authenticationToken)).thenThrow(new RuntimeException("Authentication failed"));

        // Act
        ResponseEntity<?> responseEntity = authController.validateUser(loginRequest);

        // Assert
        assertEquals(401, responseEntity.getStatusCodeValue());
    }
}
