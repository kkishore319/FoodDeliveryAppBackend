package com.fds;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.fds.exception.UserNotFoundException;
import com.fds.model.Login;
import com.fds.repo.LoginRepository;
import com.fds.service.ServiceImpl;

public class LoginServiceImplTest {

    @InjectMocks
    private ServiceImpl service;

    @Mock
    private LoginRepository loginRepository;

    @Mock
    private PasswordEncoder passwordEncoder;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetAllUsers() {
        List<Login> userList = new ArrayList<>();
        Login user1 = new Login("user1", "password1", "User", 1234567890, "user1@example.com", "Country");
        Login user2 = new Login("user2", "password2", "Admin", 1234567899, "user2@example.com", "Country");
        userList.add(user1);
        userList.add(user2);

        Mockito.when(loginRepository.findAll()).thenReturn(userList);

        List<Login> result = service.getAllUsers();

        assertEquals(1, result.size());
        assertEquals("User", result.get(0).getRole());
    }

    @Test
    public void testGetAllUsersNoUserFound() {
        List<Login> userList = new ArrayList<>();
        Login user = new Login("user", "password", "Admin", 1234567890, "user@example.com", "Country");
        userList.add(user);

        Mockito.when(loginRepository.findAll()).thenReturn(userList);

        assertThrows(UserNotFoundException.class, () -> {
            service.getAllUsers();
        });
    }

    @Test
    public void testGetByUsername() {
        String username = "user";
        Login user = new Login(username, "password", "User", 1234567890, "user@example.com", "Country");

        Mockito.when(loginRepository.findByUsername(username)).thenReturn(user);

        Login result = service.getByUsername(username);

        assertEquals(username, result.getUsername());
    }

    @Test
    public void testGetByUsernameUserNotFound() {
        String username = "user";

        Mockito.when(loginRepository.findByUsername(username)).thenReturn(null);

        assertThrows(UserNotFoundException.class, () -> {
            service.getByUsername(username);
        });
    }

    // Add similar tests for other methods like updateByUsername and updateByPassword
}
